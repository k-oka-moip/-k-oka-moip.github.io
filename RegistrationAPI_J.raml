#%RAML 1.0

# AMWA NMOS Discovery and Registration Specification: Registration API
# (c) AMWA 2016

title: Registration
baseUri: http://example.api.com/x-nmos/registration/{version}
version: v1.3
mediaType: application/json
types:
  ErrorSchema: !include schemas/error.json
documentation:
  - title: 概要
    content: |
      Registration APIは、NMOS discovery Nodesによって公開されています。
      これは、割り当てられてたレジストリにデータを公開するために使用され、Query APIを介して問い合わせを行うことができます。
      分散レジストリが利用できない小規模なデプロイメントでは、Registration APIは使用されず、ディスカバリーの責任はPeer to Peer仕様を実装することを選択した個々のノードに委ねられます。
      Registration API は Write Only API （書き込み専用）です。
  - title: Further Documentation
    content: |
      このAPIの動作をカバーするその他の規範的なドキュメントは、このリポジトリのdocsフォルダに含まれています。 
      （https://amwa-tv.github.io/nmos-discovery-registration/tags/v1.3/docs/
/:
  displayName: Base
  get:
    description: このAPIから利用可能なパスのリスト
    responses:
      200:
        body:
          example: !include ../examples/registrationapi-base-get-200.json
          type: !include schemas/registrationapi-base.json
/resource:
  displayName: Resource
  options:
    description: オリジン間リソース共有（CORS）を利用する上で、一般的に使用されるプレフライトチェックです（CORSプロトコルを理解していて準備がされていることを、特定のメソッドとヘッダーを使用してチェック）
    responses:
      200:
      403:
  post:
    description: 登録済みリソースを作成または更新する
    body:
      example: !include ../examples/registrationapi-resource-post-request.json
      type: !include schemas/registrationapi-resource-post-request.json
    responses:
      200:
        body:
          example: !include ../examples/registrationapi-resource-post-200.json
          type: !include schemas/registrationapi-resource-response.json
        headers:
          Location:
            example: /x-nmos/registration/{version}/resource/nodes/3b8be755-08ff-452b-b217-c9151eb21193
        description: 既存の登録済みリソースに対する更新操作の予想される応答です。
      201:
        body:
          example: !include ../examples/registrationapi-resource-post-200.json
          type: !include schemas/registrationapi-resource-response.json
        headers:
          Location:
            example: /x-nmos/registration/{version}/resource/nodes/3b8be755-08ff-452b-b217-c9151eb21193
        description: まだ登録されていないリソースに対して実行された作成操作の予想される応答です。
      400:
        description: POSTリクエストの形式が正しくない場合や必須属性が欠落している場合、またはAPIの構成で属性が無効な場合に返されます
        body:
          type: ErrorSchema
      409:
        description: リソースが既に異なるAPIバージョンでレジストリに存在している場合に返されます。正しいAPIバージョンはLocationヘッダで識別されます。
        body:
          type: ErrorSchema
        headers:
          Location:
            example: /x-nmos/registration/{version}/resource/nodes/3b8be755-08ff-452b-b217-c9151eb21193
  /{resourceType}/{resourceId}:
    uriParameters:
      resourceId:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
      resourceType:
        type: string
        enum: [
          "nodes",
          "devices",
          "sources",
          "flows",
          "senders",
          "receivers"
        ]
    options:
      description: オリジン間リソース共有（CORS）を利用する上で、一般的に使用されるプレフライトチェックです（CORSプロトコルを理解していて準備がされていることを、特定のメソッドとヘッダーを使用してチェック）
      responses:
        200:
        403:
    delete:
      description: 登録済みのリソースを削除します。
      responses:
        204:
          description: DELETEの後に 'No Content' を示す応答が期待されます。
        404:
          description: 要求されたリソースが存在しない場合に返されます。
          body:
            type: ErrorSchema
        409:
          description: リソースが既に異なるAPIバージョンでレジストリに存在している場合に返されます。正しいAPIバージョンはLocationヘッダで識別されます。
          body:
            type: ErrorSchema
          headers:
            Location:
              example: /x-nmos/registration/{version}/resource/nodes/3b8be755-08ff-452b-b217-c9151eb21193
    get:
      description: 登録済みのリソースを表示します。（デバッグ専用）
      responses:
        200:
          body:
            example: !include ../examples/registrationapi-resource-get-200.json
            type: !include schemas/registrationapi-resource-response.json
        404:
          description: 要求されたリソースが存在しない場合に返されます。
          body:
            type: ErrorSchema
        409:
          description: リソースが既に異なるAPIバージョンでレジストリに存在している場合に返されます。正しいAPIバージョンはLocationヘッダで識別されます。
          body:
            type: ErrorSchema
          headers:
            Location:
              example: /x-nmos/registration/{version}/resource/nodes/3b8be755-08ff-452b-b217-c9151eb21193
/health/nodes/{nodeId}:
  displayName: Node health
  uriParameters:
    nodeId:
      type: string
      pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
  options:
    description:  オリジン間リソース共有（CORS）を利用する上で、一般的に使用されるプレフライトチェックです（CORSプロトコルを理解していて準備がされていることを、特定のメソッドとヘッダーを使用してチェック）
    responses:
      200:
      403:
  post:
    description: ノードの状態を更新します。
    responses:
      200:
        body:
          example: !include ../examples/registrationapi-health-post-200.json
          type: !include schemas/registrationapi-health-response.json
      404:
        description:  要求されたリソースが存在しない場合に返されます。
        body:
          type: ErrorSchema
      409:
        description: リソースが既に異なるAPIバージョンでレジストリに存在している場合に返されます。正しいAPIバージョンはLocationヘッダで識別されます。
        body:
          type: ErrorSchema
        headers:
          Location:
            example: /x-nmos/registration/{version}/health/nodes/3b8be755-08ff-452b-b217-c9151eb21193
  get:
    description: ノードの状態を表示します。（デバッグ専用）
    responses:
      200:
        body:
          example: !include ../examples/registrationapi-health-get-200.json
          type: !include schemas/registrationapi-health-response.json
      404:
        description:  要求されたリソースが存在しない場合に返されます。
        body:
          type: ErrorSchema
      409:
        description: リソースが既に異なるAPIバージョンでレジストリに存在している場合に返されます。正しいAPIバージョンはLocationヘッダで識別されます。
        body:
          type: ErrorSchema
        headers:
          Location:
            example: /x-nmos/registration/{version}/health/nodes/3b8be755-08ff-452b-b217-c9151eb21193
